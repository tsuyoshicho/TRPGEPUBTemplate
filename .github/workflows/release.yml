name: release
on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Cache npm
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup wkhtmltopdf
        run: |
          echo from adrg/go-wkhtmltopdf workflow
          echo Get deb file
          sudo apt-get update
          sudo apt-get install -y xfonts-75dpi xfonts-base
          curl --silent --show-error --location --max-redirs 3 --fail --retry 3 --output wkhtmltopdf-linux-amd64.deb https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.bionic_amd64.deb
          echo In Ubuntu 24.04, need archived libssl1.1
          curl --silent --show-error --location --max-redirs 3 --fail --retry 3 --output libssl1.1-linux-amd64.deb http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1-1ubuntu2.1~18.04.23_amd64.deb
          sudo dpkg -i libssl1.1-linux-amd64.deb
          sudo dpkg -i wkhtmltopdf-linux-amd64.deb
          sudo ldconfig
          rm *.deb

      - name: Setup calibre
        run: |
          sudo apt-get update
          sudo apt-get install -y libopengl0 libegl1 libxcb-cursor0
          wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sh /dev/stdin install_dir=${GITHUB_WORKSPACE}/ isolated=y
          echo "${GITHUB_WORKSPACE}/calibre" >> $GITHUB_PATH

      - name: Setup PlantUML
        run: |
          sh ./tools/plantuml_download.sh

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@b1de5da23ed0a6d14e0aeee8ed52fdd87af2363c # v2

      - name: Build
        id: build
        run: |
          npm ci

          echo versions
          echo honkit
          npx honkit --version
          echo ebook-convert
          ebook-convert --version
          echo dot
          dot -V
          echo wkhtmltopdf
          wkhtmltopdf --version

          echo build
          (npm run pdf  && echo "pdf=$(ls *.pdf)"   >> $GITHUB_OUTPUT) || true
          (npm run epub && echo "epub=$(ls *.epub)" >> $GITHUB_OUTPUT) || true

      # Bump version on merging Pull Requests with specific labels.
      # (bump:major,bump:minor,bump:patch)
      - name: Bump version
        id: bumpr
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: haya14busa/action-bumpr@78ab5a104d20896c9c9122c64221b3aecf1a8cbb # v1

      # Update corresponding major and minor tag.
      # e.g. Update v1 and v1.2 when releasing v1.2.3
      - name: Update version
        uses: haya14busa/action-update-semver@fb48464b2438ae82cc78237be61afb4f461265a1 # v1
        if: "!steps.bumpr.outputs.skip"
        with:
          tag: ${{ steps.bumpr.outputs.next_version }}

      # Get tag name.
      - name: Check tag
        id: tag
        uses: haya14busa/action-cond@94f77f7a80cd666cb3155084e428254fea4281fd # v1
        with:
          cond: "${{ startsWith(github.ref, 'refs/tags/') }}"
          if_true: ${{ github.ref }}
          if_false: ${{ steps.bumpr.outputs.next_version }}

      # Create release.
      - name: Release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1
        id: create_release
        if: "steps.tag.outputs.value != ''"
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.value }}
          release_name: Release ${{ steps.tag.outputs.value }}
          body: ${{ steps.bumpr.outputs.message }}
          draft: false
          prerelease: false

      - name: Upload Release Asset PDF
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        if: steps.tag.outputs.value != '' && steps.build.outputs.pdf != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ steps.build.outputs.pdf }}
          asset_name: ${{ steps.build.outputs.pdf }}
          asset_content_type: application/pdf

      - name: Upload Release Asset EPUB
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        if: steps.tag.outputs.value != '' && steps.build.outputs.epub != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ steps.build.outputs.epub }}
          asset_name: ${{ steps.build.outputs.epub }}
          asset_content_type: application/epub+zip
